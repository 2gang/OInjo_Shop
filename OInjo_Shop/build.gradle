plugins {
	id 'java'
	id 'org.springframework.boot' version '2.6.13'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'kr.idu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.boot:spring-boot-devtools'

	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'
	implementation 'org.springframework.boot:spring-boot-starter-mail:2.7.1'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springframework.boot:spring-boot-starter-mail:2.7.1'
	testImplementation 'junit:junit:4.13.1'

	runtimeOnly 'com.mysql:mysql-connector-j'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//spring security Implementation
	testImplementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'



	//oauth2.0 Implementation
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	//lombok Implementation
	implementation 'org.projectlombok:lombok:1.18.22'

	// querydsl : jpa로 고급 질의 처리 어려움을 해결, 자바기반 통합 질의 방법 - JPQL, Querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jpa'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api:1.3.5'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api:2.2.3'
}
tasks.named('test') {
	useJUnitPlatform()
}


//기본값으로 Qclass를 생성하면 빌드 디렉토리에 들어가는데, gradle build할 때 스캔하는 영역과 ide가 스캔할 때 인텔리제이가 스캔하는 영역이 중복스캔이 일어날 수 있다.
//그래서 이런 문제를 해결하기 위해 Qclass의 생성 폴더 위치를 강제로 변경
// Querydsl 설정부
def generated = 'src/main/generated'

//자바 컴파일할 때 소스 아웃풋 디렉토리를 바꾸는 코드이다.
// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
//추가한 새로운 디렉토리를 sourceSet에 등록한다.
//Gradle에서는 하나의 Source 디렉터리만 지원을 하는데, 하나 이상의 Source 디렉터리를 Gradle에서 처리를 하기 위해서
// SourceSets에 Source 디렉터리를 등록해 주면 된다.
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}